// === admin user === 

// T·∫£i danh s√°ch user
function fetchUsers() {
    fetch("http://localhost:8080/rg/users/get")
        .then(response => response.json())
        .then(users => {
            const tableBody = document.querySelector("#userTable tbody");
            tableBody.innerHTML = ""; // X√≥a n·ªôi dung c≈©

            users.forEach(user => {
                const row = document.createElement("tr");

                row.innerHTML = `
                    <td>${user.id}</td>
                    <td>${user.username}</td>
                    <td>${user.email}</td>
                    <td>
                        <span id="password-${user.id}" data-visible="false">‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢</span>
                        <button onclick="togglePassword(${user.id}, '${user.password}')">üëÅ</button>
                    </td>
                    <td>
                        <button onclick="editUser(${user.id}, '${user.username}', '${user.email}', '******')">S·ª≠a</button>
                        <button onclick="deleteUser(${user.id})">X√≥a</button>
                    </td>
                `;
                tableBody.appendChild(row);
            });
        })
        .catch(error => console.error("L·ªói khi t·∫£i d·ªØ li·ªáu: ", error));
}

// === update user === 

document.addEventListener("DOMContentLoaded", function () {
    fetchUsers();
    // G·ª≠i API c·∫≠p nh·∫≠t khi nh·∫•n "L∆∞u"
    document.getElementById("formUser").addEventListener("submit", function (event) {
        event.preventDefault(); // Ch·∫∑n reload trang
        
        const id = document.getElementById("userId").value.trim();
        const usernameField = document.getElementById("username");
        const emailField = document.getElementById("email");
        const passwordField = document.getElementById("password");

        let userData = {};

        // L·∫•y gi√° tr·ªã c≈©
        const oldUsername = usernameField.getAttribute("du-lieu-cu");
        const oldEmail = emailField.getAttribute("du-lieu-cu");
        const oldPassword = passwordField.getAttribute("du-lieu-cu");

        // Ch·ªâ th√™m v√†o userData n·∫øu gi√° tr·ªã m·ªõi kh√°c gi√° tr·ªã c≈©
        if (usernameField.value.trim() !== oldUsername) {
            userData.username = usernameField.value.trim();
        }
        if (emailField.value.trim() !== "") userData.email = emailField.value.trim();
        else userData.email = null; // G·ª≠i null n·∫øu kh√¥ng thay ƒë·ªïi

        if (passwordField.value.trim() !== oldPassword) {
            userData.password = passwordField.value.trim();
        }

        // N·∫øu kh√¥ng c√≥ g√¨ thay ƒë·ªïi th√¨ b√°o l·ªói
        if (Object.keys(userData).length === 0) {
            alert("B·∫°n ch∆∞a thay ƒë·ªïi g√¨!");
            return;
        }
        
        fetch(`http://localhost:8080/rg/users/update/${id}`, {
            method: "PUT",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(userData)
        })
        .then(response => {
            if (response.ok) {
                alert("C·∫≠p nh·∫≠t th√†nh c√¥ng!");
                hideUserForm();
                fetchUsers(); // Load l·∫°i danh s√°ch
            } else {
                throw new Error("C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t");
            }
        })
        .catch(error => console.error("L·ªói c·∫≠p nh·∫≠t", error));
    });
});
// Hi·ªÉn th·ªã form s·ª≠a
function editUser(id, username, email, password) {
    console.log("Edit user:", id, username, email, password); // Debug ƒë·ªÉ ki·ªÉm tra gi√° tr·ªã

    const userIdField = document.getElementById("userId");
    const usernameField = document.getElementById("username");
    const emailField = document.getElementById("email");
    const passwordField = document.getElementById("password");

    if (!userIdField || !usernameField || !emailField || !passwordField) {
        console.error("L·ªói: Kh√¥ng t√¨m th·∫•y input trong HTML!");
        return;
    }

    userIdField.value = id;
    usernameField.value = username;
    emailField.value = email;
    passwordField.value = password;

    // L∆∞u gi√° tr·ªã c≈© v√†o thu·ªôc t√≠nh du-lieu-cu ƒë√∫ng
    usernameField.setAttribute("du-lieu-cu", username);
    emailField.setAttribute("du-lieu-cu", email);
    passwordField.setAttribute("du-lieu-cu", password);

    document.getElementById("userForm").style.display = "block";
}

// ·∫®n form
function hideUserForm() {
    document.getElementById("userForm").style.display = "none";
}

function togglePassword(userId, password) {
    const passwordField = document.getElementById(`password-${userId}`);

    if (passwordField.getAttribute("data-visible") === "false") {
        passwordField.innerText = password; // Hi·ªÉn th·ªã m·∫≠t kh·∫©u 
        passwordField.setAttribute("data-visible", "true");
    } else {
        passwordField.innerText = "‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"; // ·∫®n m·∫≠t kh·∫©u
        passwordField.setAttribute("data-visible", "false");
    }
}


// === delete user === 
function deleteUser(id) {
    if (!confirm("B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a user n√†y kh√¥ng ?")) {
        return;
    }
    fetch(`http://localhost:8080/rg/users/delete/${id}`, {
        method: "DELETE",
    })
    .then (response => {
        if (response.ok){
            alert("X√≥a ng∆∞·ªùi d√πng th√†nh c√¥ng!");
            fetchUsers(); //load l·∫°i listUser khi x√≥a xong
        } else {
            return response.text.then(text => {
                throw new Error(text);
            });
        }
    })
    .catch(error => alert("L·ªói khi x√≥a: " + error.message));
}


// === Admin Categories ===
// Ch·ªù trang t·∫£i xong m·ªõi th·ª±c hi·ªán
// Ch·ªù trang t·∫£i xong m·ªõi th·ª±c hi·ªán
document.addEventListener("DOMContentLoaded", function () {
    console.log("Admin.js ƒë√£ load!");
    
    const message = document.getElementById("message");
    if (!message) {
        console.error("Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠ #message trong DOM!");
        return; // Tho√°t n·∫øu kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠
    }

    // H√†m th√™m danh m·ª•c
    function addCategory() {
        const code = document.getElementById("code")?.value.trim();
        const name = document.getElementById("name")?.value.trim();

        if (!code || code.length < 3 || !name || name.length < 3) {
            message.innerHTML = "M√£ v√† t√™n danh m·ª•c ph·∫£i c√≥ √≠t nh·∫•t 3 k√Ω t·ª±!";
            message.style.color = "red";
            return;
        }

        const categoryData = { code, name };
        console.log("D·ªØ li·ªáu g·ª≠i ƒëi:", categoryData);

        fetch("http://localhost:8080/api/categories/add", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(categoryData),
        })
        .then(response => {
            if (!response.ok) {
                return response.text().then(text => { throw new Error(text); });
            }
            return response.json();
        })
        .then(data => {
            console.log("Ph·∫£n h·ªìi t·ª´ API:", data);
            message.innerHTML = "Th√™m danh m·ª•c th√†nh c√¥ng!";
            message.style.color = "green";
            document.getElementById("categoryForm").reset(); // Reset form sau khi th√™m th√†nh c√¥ng
        })
        .catch(error => {
            console.error("L·ªói:", error);
            message.innerHTML = "L·ªói khi th√™m danh m·ª•c: " + error.message;
            message.style.color = "red";
        });
    }

    window.addCategory = addCategory; // ƒêƒÉng k√Ω h√†m addCategory v√†o global scope
});





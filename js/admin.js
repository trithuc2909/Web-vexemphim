// === admin user === 

// T·∫£i danh s√°ch user
async function fetchUsers(){
    try {
        const response = await fetch("http://localhost:8080/rg/users/get");
        const user =  await response.json();

        const tableBody = document.querySelector("#userTable tbody");
        tableBody.innerHTML = ""; //X√≥a n·ªôi dung c≈© ƒëi
        user.forEach( user =>  {
            const row = document.createElement("tr");

            row.innerHTML = `<td>${user.id}</td>
                             <td>${user.username}</td>
                             <td>${user.email}</td>
                             <td>
                                  <span id="password-${user.id}" data-visible="false">‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢</span>
                                  <button onclick="togglePassword(${user.id}, '${user.password}')">üëÅ</button>
                            </td>
                            <td>
                                  <button onclick="editUser(${user.id}, '${user.username}', '${user.email}', '******')">S·ª≠a</button>
                                  <button onclick="deleteUser(${user.id})">X√≥a</button>
                            </td>
            `;
            tableBody.appendChild(row);
        });
    } catch (error) {
        console.error("L·ªói khi t·∫£i d·ªØ li·ªáu: ", error);
    }
}

// === update user === 

document.addEventListener("DOMContentLoaded", function () {
    (async function(){
        await fetchUsers();
    })();
    // G·ª≠i API c·∫≠p nh·∫≠t khi nh·∫•n "L∆∞u"
    document.getElementById("formUser").addEventListener("submit", async function (event) {
        event.preventDefault(); // Ch·∫∑n reload trang
        
        const id = document.getElementById("userId").value.trim();
        const usernameField = document.getElementById("username");
        const emailField = document.getElementById("email");
        const passwordField = document.getElementById("password");

        let userData = {};

        // L·∫•y gi√° tr·ªã c≈©
        const oldUsername = usernameField.getAttribute("du-lieu-cu");
        const oldEmail = emailField.getAttribute("du-lieu-cu");
        const oldPassword = passwordField.getAttribute("du-lieu-cu");

        // Ch·ªâ th√™m v√†o userData n·∫øu gi√° tr·ªã m·ªõi kh√°c gi√° tr·ªã c≈©
        if (usernameField.value.trim() !== oldUsername) {
            userData.username = usernameField.value.trim();
        }
        if (emailField.value.trim() !== "") userData.email = emailField.value.trim();
        else userData.email = null; // G·ª≠i null n·∫øu kh√¥ng thay ƒë·ªïi

        if (passwordField.value.trim() !== oldPassword) {
            userData.password = passwordField.value.trim();
        }

        // N·∫øu kh√¥ng c√≥ g√¨ thay ƒë·ªïi th√¨ b√°o l·ªói
        if (Object.keys(userData).length === 0) {
            alert("B·∫°n ch∆∞a thay ƒë·ªïi g√¨!");
            return;
        }

        try {
            const response = await fetch(`http://localhost:8080/rg/users/update/${id}`, {
                method: "PUT",
                headers: {"Content-Type": "application/json"},
                body: JSON.stringify(userData)
            });

            const result = await response.json(); // L·∫•y d·ªØ li·ªáu ph·∫£n h·ªìi t·ª´ API
            if (response.ok) {
                alert("C·∫≠p nh·∫≠t th√†nh c√¥ng!");
                hideUserForm();
                await fetchUsers(); // Load l·∫°i danh s√°ch
            } else {
                throw new Error(result.message || "C√≥ l·ªói khi c·∫≠p nh·∫≠t");
            }
        } catch (error) {
            console.error("L·ªói khi c·∫≠p nh·∫≠t:", error);
        }
    });
});
 
// Hi·ªÉn th·ªã form s·ª≠a user
function editUser(id, username, email, password) {
    console.log("Edit user:", id, username, email, password); // Debug ƒë·ªÉ ki·ªÉm tra gi√° tr·ªã

    const userIdField = document.getElementById("userId");
    const usernameField = document.getElementById("username");
    const emailField = document.getElementById("email");
    const passwordField = document.getElementById("password");

    if (!userIdField || !usernameField || !emailField || !passwordField) {
        console.error("L·ªói: Kh√¥ng t√¨m th·∫•y input trong HTML!");
        return;
    }

    userIdField.value = id;
    usernameField.value = username;
    emailField.value = email;
    passwordField.value = password;

    // L∆∞u gi√° tr·ªã c≈© v√†o thu·ªôc t√≠nh du-lieu-cu ƒë√∫ng
    usernameField.setAttribute("du-lieu-cu", username);
    emailField.setAttribute("du-lieu-cu", email);
    passwordField.setAttribute("du-lieu-cu", password);

    document.getElementById("userForm").style.display = "block";
}

// ·∫®n form
function hideUserForm() {
    document.getElementById("userForm").style.display = "none";
}

function togglePassword(userId, password) {
    const passwordField = document.getElementById(`password-${userId}`);

    if (passwordField.getAttribute("data-visible") === "false") {
        passwordField.innerText = password; // Hi·ªÉn th·ªã m·∫≠t kh·∫©u 
        passwordField.setAttribute("data-visible", "true");
    } else {
        passwordField.innerText = "‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"; // ·∫®n m·∫≠t kh·∫©u
        passwordField.setAttribute("data-visible", "false");
    }
}


// === delete user === 
function deleteUser(id) {
    if (!confirm("B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a user n√†y kh√¥ng ?")) {
        return;
    }
    fetch(`http://localhost:8080/rg/users/delete/${id}`, {
        method: "DELETE",
    })
    .then (response => {
        if (response.ok){
            alert("X√≥a ng∆∞·ªùi d√πng th√†nh c√¥ng!");
            fetchUsers(); //load l·∫°i listUser khi x√≥a xong
        } else {
            return response.text.then(text => {
                throw new Error(text);
            });
        }
    })
    .catch(error => alert("L·ªói khi x√≥a: " + error.message));
}


// === Admin Categories ===
// Ch·ªù trang t·∫£i xong m·ªõi th·ª±c hi·ªán
document.addEventListener("DOMContentLoaded", function () {
    const message = document.getElementById("message");
    if (!message) {
        console.error("Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠ #message trong DOM!");
        return; // Tho√°t n·∫øu kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠
    }

    // H√†m th√™m danh m·ª•c
    async function addCategory() {
        const code = document.getElementById("code")?.value.trim();
        const name = document.getElementById("name")?.value.trim();

        if (!code || code.length < 3 || !name || name.length < 3) {
            message.innerHTML = "M√£ v√† t√™n danh m·ª•c ph·∫£i c√≥ √≠t nh·∫•t 3 k√Ω t·ª±!";
            message.style.color = "red";
            return;
        }

        const categoryData = { code, name };
        console.log("D·ªØ li·ªáu g·ª≠i ƒëi:", categoryData);
        try {
            const response = await fetch("http://localhost:8080/api/categories/add", {
                method: "POST",
                headers: {"Content-Type": "application/json"},
                body: JSON.stringify(categoryData)
            })
            if (!response.ok){
                const erorText = await response.text();
                throw new Error(erorText);
            }

            const data = await response.json();
            console.log("Ph·∫£n h·ªìi t·ª´ ph√≠a API:", data);

            message.innerHTML = "Th√™m danh m·ª•c th√†nh c√¥ng!";
            message.style.color = "green";
            document.getElementById("categoryForm").reset(); // Reset form sau khi th√™m th√†nh c√¥ng
        } catch (error) {
            console.error("L·ªói: ", error);
            message.innerHTML = "L·ªói khi th√™m danh m·ª•c: " + error.message;
            message.style.color = "red";
        }   
    }
    window.addCategory = addCategory; // ƒêƒÉng k√Ω h√†m addCategory v√†o global scope
});


// === LIST Danh m·ª•c phim ===
document.addEventListener("DOMContentLoaded", async function (){
    await fetchCategories();
});

//H√†m g·ªçi API GET ALL Categories
//  H√†m g·ªçi API GET ALL Categories
async function fetchCategories() {
    try {
        const response = await fetch("http://localhost:8080/api/categories/get");
        if (!response.ok) {
            throw new Error("L·ªói khi t·∫£i danh m·ª•c!");
        }
        const data = await response.json();
        let tableBody = document.getElementById("categoryList");
        tableBody.innerHTML = ""; //X√≥a ƒëi d·ªØ li·ªáu c≈©

        data.forEach(category => {
            let row = `
                <tr>
                    <td><input type="checkbox" class="categoryCheckbox"></td>
                    <td>${category.id}</td>
                    <td>${category.code}</td>                   
                    <td>${category.name}</td>                   
                    <td>
                        <button onclick="editCategory(${category.id})">S·ª≠a</button>
                        <button onclick="deleteCategory(${category.id})">X√≥a</button>
                    </td>
                </tr>
            `;
            tableBody.innerHTML += row;
        });
    } catch (error) {
        console.error("L·ªói khi t·∫£i danh m·ª•c th·ªÉ lo·∫°i phim: ", error);
    }
}

//  Chuy·ªÉn sang trang `update.html?id=ID`
function editCategory(id) {
    window.location.href = `update.html?id=${id}`;
}

// L·∫•y ID t·ª´ URL
function getCategoryIdFromURL() {
    const params = new URLSearchParams(window.location.search);
    return params.get("id"); //L·∫•y tham s·ªë id t·ª´ url
}

//  Hi·ªÉn th·ªã d·ªØ li·ªáu khi v√†o trang c·∫≠p nh·∫≠t
async function loadCategoryData() {
    const id = getCategoryIdFromURL();
    if (!id) {
        alert("Kh√¥ng t√¨m th·∫•y danh m·ª•c!");
        return;
    }
    try {
        const response = await fetch(`http://localhost:8080/api/categories/get/${id}`);
        if (!response.ok) {
            throw new Error("Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu danh m·ª•c!");
        }

        const category = await response.json();
        document.getElementById("code").value = category.code;
        document.getElementById("name").value = category.name;
    } catch (error) {
        console.error("L·ªói khi t·∫£i danh m·ª•c: ", error);
        alert("Kh√¥ng th·ªÉ hi·ªÉn th·ªã danh m·ª•c!");
    }
}

// C·∫≠p nh·∫≠t danh m·ª•c
async function updateCategory() {
    const id = getCategoryIdFromURL();
    if (!id) {
        alert("Kh√¥ng t√¨m th·∫•y danh m·ª•c!");
        return;
    }
    
    const updatedCategory = {
        code: document.getElementById("code").value,
        name: document.getElementById("name").value
    };

    try {
        const response = await fetch(`http://localhost:8080/api/categories/update/${id}`, {
            method: "PUT",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(updatedCategory)
        });

        if (!response.ok) {
            throw new Error("C·∫≠p nh·∫≠t th·∫•t b·∫°i!");
        }
        alert("C·∫≠p nh·∫≠t danh m·ª•c th√†nh c√¥ng!");
        window.location.href = "danhsachdm.html"; // Quay v·ªÅ danh s√°ch
    } catch (error) {
        console.error("L·ªói khi c·∫≠p nh·∫≠t danh m·ª•c: ", error);
        alert("Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t danh m·ª•c!");
    }
}

// X√≥a danh m·ª•c th·ªÉ lo·∫°i phim
async function deleteCategory(id) {
    if (confirm("B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a danh m·ª•c n√†y kh√¥ng?")) {
        try {
            const response = await fetch(`http://localhost:8080/api/categories/delete/${id}`, {
                method: "DELETE"
            });

            if (!response.ok) {
                throw new Error("X√≥a kh√¥ng th√†nh c√¥ng!");
            }
            alert("X√≥a danh m·ª•c th√†nh c√¥ng!");
            fetchCategories();
        } catch (error) {
            console.error("L·ªói khi x√≥a danh m·ª•c: ", error);
            alert("Kh√¥ng th·ªÉ x√≥a danh m·ª•c!");
        }
    }
}

// Ch·ªçn t·∫•t c·∫£
function selectAll() {
    document.querySelectorAll(".categoryCheckbox").forEach(cb => cb.checked = true);
}

// B·ªè ch·ªçn t·∫•t c·∫£
function deselectAll() {
    document.querySelectorAll(".categoryCheckbox").forEach(cb => cb.checked = false);
}

// X√≥a c√°c m·ª•c ƒë√£ ch·ªçn
async function deleteSelected() {
    const selectedItems = document.querySelectorAll(".categoryCheckbox:checked");

    if (selectedItems.length === 0) {
        alert("B·∫°n ch∆∞a ch·ªçn m·ª•c n√†o ƒë·ªÉ x√≥a!");
        return;
    }
    if (!confirm("B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a c√°c m·ª•c ƒë√£ ch·ªçn kh√¥ng?")) return;

    for (let checkbox of selectedItems) {
        const row = checkbox.closest("tr");
        const id = row.children[1].textContent.trim(); // L·∫•y ID t·ª´ c·ªôt th·ª© hai

        try {
            const response = await fetch(`http://localhost:8080/api/categories/delete/${id}`, {
                method: "DELETE",
                headers: { "Content-Type": "application/json" }
            });

            if (!response.ok) {
                throw new Error(`X√≥a kh√¥ng th√†nh c√¥ng v·ªõi ID ${id}`);
            }
        } catch (error) {
            console.error("L·ªói khi x√≥a danh m·ª•c: ", error);
            alert("Kh√¥ng th·ªÉ x√≥a danh m·ª•c!");
        }
    }
    alert("X√≥a danh m·ª•c th√†nh c√¥ng!");
    fetchCategories();
}

// Load d·ªØ li·ªáu khi v√†o `update.html` ho·∫∑c `danhsachdm.html`
document.addEventListener("DOMContentLoaded", () => {
    if (window.location.pathname.includes("update.html")) {
        loadCategoryData();
    } else if (window.location.pathname.includes("danhsachdm.html")) {
        fetchCategories();
    }
});

// ƒêƒÉng k√Ω c√°c h√†m v√†o ph·∫°m vi to√†n c·ª•c
window.selectAll = selectAll;
window.deselectAll = deselectAll;
window.deleteSelected = deleteSelected;
window.updateCategory = updateCategory;
window.editCategory = editCategory;




















